#!/usr/bin/env python3

import time
import sys
import csv 
import pathlib
import os

import spidev
import RPi.GPIO as GPIO

def bytes_to_hex(data):
    return ''.join(["%02X " % x for x in data]).strip()

sleep_us = lambda us: time.sleep(us/1000000.0)

CS_PIN = 25

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(CS_PIN, GPIO.OUT)
GPIO.output(CS_PIN, GPIO.HIGH)

class CSR:

    def __init__(self, csv_file):
        self.items = list(csv.reader(filter(lambda row: row[0] != "#", open(csv_file))))
        self.addresses = {}

        for item in self.items:
            group, name, addr, length, mode = item

            if group == 'csr_register':
                self.addresses[name] = int(addr, 16)

class Bridge:

    def __init__(self):
        spi = spidev.SpiDev()

        spi.open(0,0)
        spi.max_speed_hz = 200
        spi.mode = 0
        spi.no_cs = True

        self.spi = spi

    def start(self):
        GPIO.output(CS_PIN, GPIO.LOW)

    def stop(self):
        GPIO.output(CS_PIN, GPIO.HIGH)

    def send(self, data, debug=False):
        recv = self.spi.xfer3(data)

        if debug:
            print("{} -> {}".format(data, recv))
        
        return recv

    def poke(self, addr, value):
        # Map from CSR.csv addresses to actualy internal addresses
        addr = int(addr/4)

        self.start()
        sleep_us(10)
        self.send([0x02])

        self.send([
            (addr  >>  0) & 0xFF,
            (addr  >>  8) & 0xFF,
            (value >>  0) & 0xFF,
            (value >>  8) & 0xFF,
            (value >> 16) & 0xFF,
            (value >> 32) & 0xFF,
        ])

        sleep_us(10)
        self.stop()
        sleep_us(10)

    def peek(self, addr):
        # Map from CSR.csv addresses to actualy internal addresses
        addr = int(addr/4)

        self.start()
        sleep_us(10)
        self.send([0x03])

        for shift in [0, 8]:
            self.send([(addr >> shift) & 0xFF])

        recv = self.send([
            (addr  >> 0) & 0xFF,
            (addr  >> 8) & 0xFF,
            0x00, 0xCC, 0xCC, 0xCC, 0xCC
        ])[1:-2]

        sleep_us(10)
        self.stop()
        sleep_us(10)

        return recv[::-1]


argstr = " ".join(sys.argv)

if "-h" in argstr or "--help" in argstr or len(sys.argv) == 1:
    print("Usage: {} ADDR [DATA]".format(sys.argv[0]))
    print("ADDR and DATA can be hex formatted (e.g. 0x0804).")
    print("DATA can also be binary formatted (e.g. 0b00000000) or decimal")
    print("ADDR can also be a string which matches the register name in csr.csv")
    print("ADDR only will read that location and print it")
    print("ADDR + DATA will write DATA to ADDR")
    sys.exit(0)

addr = sys.argv[1].lower()

if addr[0] == 'x' or addr[0:2] == '0x':
    addr = int(sys.argv[1], 16)
else:
    csrfile = os.path.join(pathlib.Path(__file__).parent.absolute(), "generated", "csr.csv")
    csr = CSR(csrfile)
    addr = csr.addresses[addr]

bridge = Bridge()

if len(sys.argv) == 2:
    print(bytes_to_hex(bridge.peek(addr)))

elif len(sys.argv) == 3:
    data = sys.argv[2].lower()

    if data[0:2] == '0x':
        data = int(data, 16)
    elif data[0:2] == '0b':
        data = int(data, 2)
    else:
        data = int(data)

    bridge.poke(addr, data)

    print(bytes_to_hex(bridge.peek(addr)))
